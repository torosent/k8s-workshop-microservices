# Name of the project, in the form "user/project"
project: "torosent/stickerstore"

# Domain/Org/Project
repository: "github.com/torosent/k8s-workshop-microservices"

# The definitive clone URL. This can be any Git-supported URL format.
# You may set this to "" for no clone URL.
cloneURL: "https://github.com/torosent/k8s-workshop-microservices.git"

# OPTIONAL: initGitSubmodules will recursively initialize all submodules in the repository. Default: false
# initGitSubmodules: "false"

# OPTIONAL: defaultScript is the brigade.js used by default when your VCS repo misses a brigade.js
# in it.
# defaultScript: |
#   const { events, Job } = require("brigadier")
#   function run(e, project) {
#     console.log("hello default script")
#   }
#   events.on("run", run)

# Used by GitHub and other services to compute hook HMACs.
sharedSecret: "IBrakeForSeaBeasts"

# OPTIONAL: Use this to have Brigade update your project about the build.
# This is REQUIRED for the GitHub gateway, but optional otherwise.
github:
  token: "github oauth token"
secrets:
  acrServer: tomerplayground.azurecr.io
  acrUsername: 
  acrPassword: 
#   ENTERPRISE: For enterprise GitHub customers, set both of these as well.
#   baseURL: "https://internal.github.url/foo"
#   uploadURL: "https://internal.github.url/foo"

# OPTIONAL: Use this for private repositories
# This is the PRIVATE key that Brigade will use to clone a private repo.
# You should generate a special key for this. Don't reuse another one.
# sshKey: |-
#  -----BEGIN RSA PRIVATE KEY-----
#  IIEpAIBAAKCAg1wyZD164xNLrANjRrcsbieLwHJ6fKD3LC19E...
#  ...
#  ...
#  -----END RSA PRIVATE KEY-----

# OPTIONAL: Items in the 'secrets' array can be mounted as environment variables by
# the brigade.js
#
# Example:
#
# In JS, do this:
#
#   events.push = function(e, p) {
#     j = new Job("example")
#     j.env= {"MY_ENV_VAR", p.secrets.myVar}
#   }
#
# And here, add this:
#
#   secrets:
#     myVar: "super awesome"
#
# Inside of the job's pod, $MY_ENV_VAR = "super awesome"
secrets:
  # Example:
  # username: hello

# OPTIONAL: Namespace into which builds will be deployed.
# Using this has implications for what you can access, so don't set this unless
# you know what you are doing.
# namespace: "default"

# RECOMMENDED: vcsSidecar is the image that fetches a repo from a VCS
# The default sidecar uses Git to fetch a copy of the project. Commenting this
# out will prevent the worker from using a sidecar. This may improve performance
# very slightly, but will break some gateways or cause the default script to
# be used.
vcsSidecar: "deis/git-sidecar:latest"

# OPTIONAL: buildStorageSize is the size of the shared storage space used by the jobs
# buildStorageSize: "50Mi"

# Allow Jobs to run in privileged mode. This will allow features like
# Docker-in-Docker. This must be set to true before turning allowHostMounts
# on.
allowPrivilegedJobs: "true"

# OPTIONAL: Use this to allow host mounted docker sockets in your jobs.
# This is a big security risk if your project is public-facing; enable at your own risk.
# allowHostMounts: "true"

# Kubernetes-specific configuration options.
kubernetes:
  # OPTIONAL: Override the storage class used for storing job caches. This must
  # point to a readWriteMany volume provisioner.
  #cacheStorageClass: default
  # OPTIONAL: Override the storage class used for build storage. This must
  # point to a readWriteMany volume provisioner.
  #buildStorageClass: default

###
# ADAVANCED
###

# OPTIONAL: specify an alternative command that the worker pod should run on startup.
# For example, if you want the typescript compiler to re-run, replace this with
# 'yarn build-start'. The default is 'yarn -s start' (-s is for silent).
# Uncomment the line below to increase logging verbosity.
# workerCommand: "yarn start"

# OPTIONAL: Project-specific worker settings which takes precedence over brigade-wide settings
# Useful when you want a specific brigade-worker image for running brigade.js of this project.
worker:
  #registry: deis
  #name: brigade-worker
  #tag:
  #pullPolicy: IfNotPresent